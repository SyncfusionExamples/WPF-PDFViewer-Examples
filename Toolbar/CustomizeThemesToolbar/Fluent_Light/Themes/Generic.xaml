<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Syncfusion.Themes.FluentLight.WPF">
    
    <Style TargetType="{x:Type local:RevealItem}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="#40000000"/>
        <Setter Property="HoverBorder" Value="#40000000"/>
        <Setter Property="PressedBackground" Value="#33000000"/>
        <Setter Property="HoverBackground" Value="#1A000000"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:RevealItem}">
                    <Grid x:Name="rootGrid">
                        <Grid.Resources>
                                <Storyboard x:Key="PressedRevealStoryboard">
                                    <DoubleAnimation
                                            Storyboard.TargetName="backgroundBorder"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            To="0.8"
                                            Duration="0:0:0.600">
                                        <DoubleAnimation.EasingFunction>
                                            <CubicEase EasingMode="EaseOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>

                                    <DoubleAnimation
                                            Storyboard.TargetName="pressedRect"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            To="1"
                                            Duration="0:0:0.200">
                                        <DoubleAnimation.EasingFunction>
                                            <CubicEase EasingMode="EaseOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation
                                            BeginTime="0:0:0.150"
                                            Storyboard.TargetName="pressedRect"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            To="0.1"
                                            Duration="0:0:1.000">
                                        <DoubleAnimation.EasingFunction>
                                            <CubicEase EasingMode="EaseOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>

                                    <DoubleAnimation
                                            Storyboard.TargetName="pressedRectBrush"
                                            Storyboard.TargetProperty="(RadialGradientBrush.RadiusX)"
                                            From="100"
                                            To="50"
                                            Duration="0:0:0.100">
                                        <DoubleAnimation.EasingFunction>
                                            <CubicEase EasingMode="EaseOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation
                                            BeginTime="0:0:0.150"
                                            Storyboard.TargetName="pressedRectBrush"
                                            Storyboard.TargetProperty="(RadialGradientBrush.RadiusX)"
                                            To="200"
                                            Duration="0:0:1.000">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation
                                            Storyboard.TargetName="pressedRectBrush"
                                            Storyboard.TargetProperty="(RadialGradientBrush.RadiusY)"
                                            From="100"
                                            To="50"
                                            Duration="0:0:0.100">
                                        <DoubleAnimation.EasingFunction>
                                            <CubicEase EasingMode="EaseOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation
                                            BeginTime="0:0:0.150"
                                            Storyboard.TargetName="pressedRectBrush"
                                            Storyboard.TargetProperty="(RadialGradientBrush.RadiusY)"
                                            To="200"
                                            Duration="0:0:1.000">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation
                                            Storyboard.TargetName="pressedRectOffset"
                                            Storyboard.TargetProperty="Offset"
                                            To="0"
                                            Duration="0:0:0.000">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation
                                            BeginTime="0:0:0.150"
                                            Storyboard.TargetName="pressedRectOffset"
                                            Storyboard.TargetProperty="Offset"
                                            From="0"
                                            To="0.8"
                                            Duration="0:0:1.000">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>

                                    <DoubleAnimation
                                            BeginTime="0:0:0.200"
                                            Storyboard.TargetName="pressedRectBrush"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0"
                                            Duration="0:0:1.500">
                                        <DoubleAnimation.EasingFunction>
                                            <SineEase EasingMode="EaseInOut" />
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>

                            <Storyboard x:Key="PressedGlowStoryboard">
                                <DoubleAnimation
                                            Storyboard.TargetName="pressedGlowBorder"
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            To="1"
                                            Duration="0:0:0.200">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseOut" />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </Grid.Resources>
                        <Border x:Name="backgroundBorder">
                            <Grid ClipToBounds="True">
                                <Border x:Name="backgroundMouseOver" Visibility="Collapsed"/>
                                <Rectangle x:Name="pressedRect" Opacity="0.1">
                                    <Rectangle.Fill>
                                        <RadialGradientBrush x:Name="pressedRectBrush" MappingMode="Absolute" RadiusX="200" RadiusY="200">
                                            <GradientStop Offset="0" Color="Transparent" />
                                            <GradientStop x:Name="pressedRectOffset" Offset="0.5" Color="#33000000"/>
                                            <GradientStop Offset="1" Color="Transparent" />
                                        </RadialGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Grid>
                        </Border>
                        <Grid x:Name="border">
                            <Border
                                x:Name="borderMouseOver"
                                Background="Transparent"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"
                                CornerRadius="{Binding Path=CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"
                                >
                                <Border x:Name="pressedGlowBorder" Opacity="0" Background="Transparent" BorderThickness="2" Margin="-3">
                                    <Border.Effect>
                                        <DropShadowEffect ShadowDepth="0" BlurRadius="10" />
                                    </Border.Effect>
                                </Border>
                            </Border>

                            <Border
                                x:Name="borderOpacityMask" Visibility="Collapsed"
                                Background="Transparent"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"
                                CornerRadius="{Binding Path=CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"/>                            
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HoverEffectMode" Value="Border" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="borderMouseOver" Property="Opacity" Value="{Binding Path=HoverBorderOpacity, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter TargetName="borderMouseOver" Property="BorderBrush" Value="{Binding Path=HoverBorder, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter TargetName="borderOpacityMask" Property="Visibility" Value="Visible" />
                            <Setter TargetName="backgroundMouseOver" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="PressedEffectMode" Value="Glow" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="borderMouseOver" Property="Background" Value="{Binding Path=HoverBackground, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter TargetName="borderMouseOver" Property="Opacity" Value="{Binding Path=HoverBorderOpacity, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter TargetName="borderMouseOver" Property="BorderBrush" Value="{Binding Path=HoverBorder, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter TargetName="borderOpacityMask" Property="Visibility" Value="Visible" />
                            <Setter TargetName="backgroundMouseOver" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HoverEffectMode" Value="Background" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="PressedEffectMode" Value="Reveal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="backgroundMouseOver" Property="Visibility" Value="Visible" />
                            <Setter TargetName="borderMouseOver" Property="Opacity" Value="{Binding Path=HoverBorderOpacity, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter TargetName="borderMouseOver" Property="Background" Value="{Binding Path=HoverBackground, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter TargetName="borderMouseOver" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="borderOpacityMask" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HoverEffectMode" Value="BackgroundAndBorder" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="PressedEffectMode" Value="Reveal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="backgroundMouseOver" Property="Visibility" Value="Visible" />
                            <Setter TargetName="borderMouseOver" Property="Opacity" Value="{Binding Path=HoverBorderOpacity, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter TargetName="borderMouseOver" Property="Background" Value="{Binding Path=HoverBackground, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter TargetName="borderMouseOver" Property="BorderBrush" Value="{Binding Path=HoverBorder, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter TargetName="borderOpacityMask" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="PressedEffectMode" Value="Glow"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="backgroundBorder" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="borderOpacityMask" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="pressedGlowBorder" Property="Background" Value="{Binding Path=HoverBorder, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="PressedEffectMode" Value="Reveal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="borderMouseOver" Property="Opacity" Value="{Binding Path=PressedBorderOpacity, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:SfAcrylicPanel}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SfAcrylicPanel}">
                    <Grid ClipToBounds="True">
                        <Canvas>
                            <ContentControl>
                                <ContentControl.CacheMode>
                                    <BitmapCache RenderAtScale="0.2"/>
                                </ContentControl.CacheMode>
                                <Rectangle x:Name="panelRect"
                                           IsHitTestVisible="False"
                                           Width="{Binding Target.ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type local:SfAcrylicPanel}}}"
                                           Height="{Binding Target.ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type local:SfAcrylicPanel}}}"
                                           ClipToBounds="False">
                                    <Rectangle.Fill>
                                        <VisualBrush Stretch="None" AlignmentX="Left" AlignmentY="Top"
                                                     ViewboxUnits="Absolute"
                                                     Visual="{Binding Target, RelativeSource={RelativeSource AncestorType={x:Type local:SfAcrylicPanel}}}">
                                        </VisualBrush>
                                    </Rectangle.Fill>
                                    <Rectangle.Effect>
                                        <BlurEffect Radius="100"/>
                                    </Rectangle.Effect>
                                </Rectangle>
                            </ContentControl>
                        </Canvas>

                        <!-- tint layer -->
                        <Rectangle Opacity="{Binding Path=TintOpacity, RelativeSource={RelativeSource Mode=TemplatedParent}}" 
                                   Fill="{Binding Path=TintBrush, RelativeSource={RelativeSource Mode=TemplatedParent}}">                            
                        </Rectangle>

                        <!-- noise layer -->
                        <Rectangle Opacity="{Binding Path=NoiseOpacity, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                   Fill="{Binding Path=NoiseBrush, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <Rectangle.Effect>
                                <BlurEffect Radius="{Binding Path=BlurRadius, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            </Rectangle.Effect>
                        </Rectangle>


                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
